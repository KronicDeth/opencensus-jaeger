%%
%% Autogenerated by Thrift Compiler ()
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module('Jaeger.Thrift.Sampling.Types').

-include("Jaeger.Thrift.Sampling.Types.hrl").

-export([struct_info/1, struct_info_ext/1, enum_info/1, enum_names/0, struct_names/0, exception_names/0]).

struct_info('Jaeger.Thrift.ProbabilisticSamplingStrategy') ->
  {struct, [{1, double}]}
;

struct_info('Jaeger.Thrift.RateLimitingSamplingStrategy') ->
  {struct, [{1, i16}]}
;

struct_info('Jaeger.Thrift.OperationSamplingStrategy') ->
  {struct, [{1, string},
          {2, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.ProbabilisticSamplingStrategy'}}}]}
;

struct_info('Jaeger.Thrift.PerOperationSamplingStrategies') ->
  {struct, [{1, double},
          {2, double},
          {3, {list, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.OperationSamplingStrategy'}}}},
          {4, double}]}
;

struct_info('Jaeger.Thrift.SamplingStrategyResponse') ->
  {struct, [{1, i32},
          {2, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.ProbabilisticSamplingStrategy'}}},
          {3, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.RateLimitingSamplingStrategy'}}},
          {4, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.PerOperationSamplingStrategies'}}}]}
;

struct_info(_) -> erlang:error(function_clause).

struct_info_ext('Jaeger.Thrift.ProbabilisticSamplingStrategy') ->
  {struct, [{1, required, double, 'samplingRate', undefined}]}
;

struct_info_ext('Jaeger.Thrift.RateLimitingSamplingStrategy') ->
  {struct, [{1, required, i16, 'maxTracesPerSecond', undefined}]}
;

struct_info_ext('Jaeger.Thrift.OperationSamplingStrategy') ->
  {struct, [{1, required, string, 'operation', undefined},
          {2, required, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.ProbabilisticSamplingStrategy'}}, 'probabilisticSampling', #'Jaeger.Thrift.ProbabilisticSamplingStrategy'{}}]}
;

struct_info_ext('Jaeger.Thrift.PerOperationSamplingStrategies') ->
  {struct, [{1, required, double, 'defaultSamplingProbability', undefined},
          {2, required, double, 'defaultLowerBoundTracesPerSecond', undefined},
          {3, required, {list, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.OperationSamplingStrategy'}}}, 'perOperationStrategies', []},
          {4, optional, double, 'defaultUpperBoundTracesPerSecond', undefined}]}
;

struct_info_ext('Jaeger.Thrift.SamplingStrategyResponse') ->
  {struct, [{1, required, i32, 'strategyType', undefined},
          {2, optional, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.ProbabilisticSamplingStrategy'}}, 'probabilisticSampling', #'Jaeger.Thrift.ProbabilisticSamplingStrategy'{}},
          {3, optional, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.RateLimitingSamplingStrategy'}}, 'rateLimitingSampling', #'Jaeger.Thrift.RateLimitingSamplingStrategy'{}},
          {4, optional, {struct, {'Jaeger.Thrift.Sampling.Types', 'Jaeger.Thrift.PerOperationSamplingStrategies'}}, 'operationSampling', #'Jaeger.Thrift.PerOperationSamplingStrategies'{}}]}
;

struct_info_ext(_) -> erlang:error(function_clause).

struct_names() ->
  ['Jaeger.Thrift.ProbabilisticSamplingStrategy', 'Jaeger.Thrift.RateLimitingSamplingStrategy', 'Jaeger.Thrift.OperationSamplingStrategy', 'Jaeger.Thrift.PerOperationSamplingStrategies', 'Jaeger.Thrift.SamplingStrategyResponse'].

enum_info('SamplingStrategyType') ->
  [
    {'PROBABILISTIC', 0},
    {'RATE_LIMITING', 1}
  ];

enum_info(_) -> erlang:error(function_clause).

enum_names() ->
  ['SamplingStrategyType'].

exception_names() ->
  [].

